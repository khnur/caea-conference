{"version":3,"file":"static/js/517.c617b018.chunk.js","mappings":"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","sources":["services/sessionizeService.ts","pages/Speakers.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nexport interface Session {\n  id: string;\n  title: string;\n  description: string;\n  startsAt: string;\n  endsAt: string;\n  isServiceSession: boolean;\n  isPlenumSession: boolean;\n  speakers: string[];\n  roomId: number;\n  status: string;\n  liveUrl: string | null;\n  recordingUrl: string | null;\n}\n\nexport interface Speaker {\n  id: string;\n  firstName: string;\n  lastName: string;\n  fullName: string;\n  bio: string;\n  tagLine: string;\n  profilePicture: string;\n  isTopSpeaker: boolean;\n  sessions: number[];\n}\n\nexport interface Room {\n  id: number;\n  name: string;\n  sort: number;\n}\n\nexport interface SessionizeData {\n  sessions: Session[];\n  speakers: Speaker[];\n  rooms: Room[];\n  categories: any[];\n  questions: any[];\n}\n\nconst API_URL = 'https://sessionize.com/api/v2/i66sipcq/view/All';\n\nexport const useSessionizeData = () => {\n  const [data, setData] = useState<SessionizeData | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(API_URL);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const jsonData = await response.json();\n        setData(jsonData);\n      } catch (err) {\n        setError(err instanceof Error ? err : new Error('An unknown error occurred'));\n        console.error('Error fetching Sessionize data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return { data, loading, error };\n};\n\n// Helper function to get speaker details for a session\nexport const findSpeakersForSession = (session: Session, allSpeakers: Speaker[]) => {\n  return allSpeakers.filter(speaker => session.speakers.includes(speaker.id));\n};\n\n// Helper function to get room details for a session\nexport const findRoomForSession = (session: Session, allRooms: Room[]) => {\n  return allRooms.find(room => room.id === session.roomId);\n};\n\n// Helper function to group sessions by date\nexport const groupSessionsByDate = (sessions: Session[]) => {\n  const grouped = sessions.reduce((acc, session) => {\n    const date = new Date(session.startsAt).toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n    \n    if (!acc[date]) {\n      acc[date] = [];\n    }\n    \n    acc[date].push(session);\n    return acc;\n  }, {} as Record<string, Session[]>);\n  \n  // Sort sessions by start time within each day\n  Object.keys(grouped).forEach(date => {\n    grouped[date].sort((a, b) => \n      new Date(a.startsAt).getTime() - new Date(b.startsAt).getTime()\n    );\n  });\n  \n  return grouped;\n};\n\n// Format date and time from ISO string\nexport const formatSessionTime = (isoString: string) => {\n  return new Date(isoString).toLocaleTimeString('en-US', {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n}; ","import React from 'react';\nimport { useSessionizeData, Speaker as SessionizeSpeaker } from '../services/sessionizeService';\n\ninterface SpeakerCardProps {\n  speaker: SessionizeSpeaker;\n}\n\nconst Speakers: React.FC = () => {\n  const { data, loading, error } = useSessionizeData();\n\n  // Handle loading and error states\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center py-16\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 p-4 rounded-md\">\n        <h3 className=\"text-lg font-medium text-red-800\">Error loading speakers</h3>\n        <p className=\"mt-2 text-sm text-red-700\">\n          Unable to load the conference speakers. Please try again later.\n        </p>\n      </div>\n    );\n  }\n\n  if (!data || !data.speakers || data.speakers.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <h2 className=\"text-xl font-semibold text-gray-900\">No speakers available</h2>\n        <p className=\"mt-2 text-gray-600\">The conference speakers have not been published yet. Please check back later.</p>\n      </div>\n    );\n  }\n\n  // For demonstration, let's mark specific speakers as keynote speakers\n  // In a real application, this information might come from the API or be stored elsewhere\n  const keynoteSpeakers = data.speakers.filter(speaker => \n    speaker.id === \"00000000-0000-0000-0000-000000000005\" || \n    speaker.id === \"00000000-0000-0000-0000-000000000001\"\n  );\n  \n  const regularSpeakers = data.speakers.filter(speaker => \n    !keynoteSpeakers.some(keynote => keynote.id === speaker.id)\n  );\n\n  const SpeakerCard: React.FC<SpeakerCardProps> = ({ speaker }) => (\n    <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n      <div className=\"aspect-w-3 aspect-h-2\">\n        <img \n          className=\"h-48 w-full object-cover\" \n          src={speaker.profilePicture || \"https://via.placeholder.com/300\"} \n          alt={speaker.fullName} \n        />\n      </div>\n      <div className=\"p-6\">\n        <h3 className=\"text-lg font-bold text-gray-900\">{speaker.fullName}</h3>\n        <p className=\"text-sm text-primary\">{speaker.tagLine || \"Speaker\"}</p>\n        <div className=\"mt-3\">\n          <p className=\"text-sm text-gray-700 line-clamp-3\">{speaker.bio}</p>\n        </div>\n        {speaker.sessions && speaker.sessions.length > 0 && (\n          <div className=\"mt-4\">\n            <p className=\"text-xs text-gray-500 uppercase font-semibold\">Sessions</p>\n            <p className=\"text-sm text-gray-700\">{speaker.sessions.length} {speaker.sessions.length === 1 ? 'session' : 'sessions'}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-12\">\n      <div className=\"text-center\">\n        <h1 className=\"text-3xl font-extrabold text-gray-900 sm:text-4xl\">\n          Conference Speakers\n        </h1>\n        <p className=\"mt-4 text-xl text-gray-500 max-w-3xl mx-auto\">\n          Leading experts from around the world\n        </p>\n      </div>\n\n      {/* Keynote Speakers */}\n      {keynoteSpeakers.length > 0 && (\n        <section>\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Keynote Speakers</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {keynoteSpeakers.map(speaker => (\n              <SpeakerCard key={speaker.id} speaker={speaker} />\n            ))}\n          </div>\n        </section>\n      )}\n\n      {/* All Other Speakers */}\n      {regularSpeakers.length > 0 && (\n        <section>\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Speakers</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {regularSpeakers.map(speaker => (\n              <SpeakerCard key={speaker.id} speaker={speaker} />\n            ))}\n          </div>\n        </section>\n      )}\n\n      {/* Call for Papers */}\n      <section className=\"bg-gray-50 p-8 rounded-lg\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Become a Speaker</h2>\n          <p className=\"text-gray-700 mb-6\">\n            We're still accepting submissions for parallel sessions and poster presentations.\n            Submit your research paper or abstract by July 15, 2023.\n          </p>\n          <button className=\"inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-primary hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary\">\n            Submit Your Paper\n          </button>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Speakers; "],"names":["useSessionizeData","data","setData","useState","loading","setLoading","error","setError","useEffect","async","response","fetch","ok","Error","concat","status","jsonData","json","err","console","fetchData","findSpeakersForSession","session","allSpeakers","filter","speaker","speakers","includes","id","findRoomForSession","allRooms","find","room","roomId","groupSessionsByDate","sessions","grouped","reduce","acc","date","Date","startsAt","toLocaleDateString","weekday","year","month","day","push","Object","keys","forEach","sort","a","b","getTime","formatSessionTime","isoString","toLocaleTimeString","hour","minute","Speakers","_jsx","className","children","_jsxs","length","keynoteSpeakers","regularSpeakers","some","keynote","SpeakerCard","_ref","src","profilePicture","alt","fullName","tagLine","bio","map"],"sourceRoot":""}