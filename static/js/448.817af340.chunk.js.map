{"version":3,"file":"static/js/448.817af340.chunk.js","mappings":"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","sources":["pages/Register.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as FaIcons from 'react-icons/fa';\nimport type { IconType } from 'react-icons';\n\n// Registration type constants\nconst REGISTER_PARTICIPANT = 'participant';\nconst REGISTER_SPEAKER = 'speaker';\n\n// Configuration variables\nconst REGISTRATION_EMAIL = 'nurzhan.kozhamuratov@nu.edu.kz';\n\n// Helper function to render icons safely\nconst Icon = ({ icon, className }: { icon: IconType, className?: string }) => {\n  // @ts-ignore - bypass the TypeScript error with the icon type\n  return React.createElement(icon, { className });\n};\n\n// Field validation interface\ninterface FieldState {\n  value: string;\n  valid: boolean;\n  touched: boolean;\n  errorMessage: string;\n}\n\nconst Register: React.FC = () => {\n  // Create refs for input fields\n  const inputRefs = React.useRef<{[key: string]: HTMLInputElement | HTMLTextAreaElement | null}>({});\n  \n  // Add state for email data\n  const [emailData, setEmailData] = useState({\n    subject: '',\n    body: '',\n    copySuccess: '',\n  });\n  \n  // Form state with validation\n  const [formData, setFormData] = useState({\n    registrationType: REGISTER_PARTICIPANT,\n    firstName: { value: '', valid: false, touched: false, errorMessage: 'First name is required' },\n    lastName: { value: '', valid: false, touched: false, errorMessage: 'Last name is required' },\n    middleName: { value: '', valid: true, touched: false, errorMessage: '' },\n    birthDate: { value: '', valid: true, touched: false, errorMessage: '' },\n    institution: { value: '', valid: true, touched: false, errorMessage: '' },\n    country: { value: '', valid: true, touched: false, errorMessage: '' },\n    email: { value: '', valid: false, touched: false, errorMessage: 'Valid email address is required' },\n    phone: { value: '', valid: true, touched: false, errorMessage: '' },\n    // Speaker-specific fields\n    paperTitle: { value: '', valid: true, touched: false, errorMessage: 'Paper title is required for speakers' },\n    paperAbstract: { value: '', valid: true, touched: false, errorMessage: 'Abstract is required for speakers' },\n    coAuthors: { value: '', valid: true, touched: false, errorMessage: '' },\n    keywords: { value: '', valid: true, touched: false, errorMessage: '' },\n    // Form state\n    error: '',\n    loading: false\n  });\n\n  // Tooltips state\n  const [activeTooltip, setActiveTooltip] = useState<string | null>(null);\n  \n  // Add state for saving indicator\n  const [isSaving, setIsSaving] = useState(false);\n  \n  // Load saved form data from localStorage on component mount\n  useEffect(() => {\n    try {\n      // Check if we're in email sending mode\n      const isEmailSending = localStorage.getItem('caaeEmailSending') === 'true';\n      \n      // If we're in email sending mode, we need to check if it's a new visit or\n      // returning after opening email client\n      if (isEmailSending) {\n        // Check if we have form data saved - if not, or if coming from a different session,\n        // reset the email sending flag\n        const savedData = localStorage.getItem('caaeRegistrationForm');\n        \n        if (!savedData) {\n          // No form data, so this is likely a new session - reset the flags\n          localStorage.removeItem('caaeEmailSending');\n          localStorage.removeItem('caaeEmailData');\n        } else {\n          // We have form data and the email flag, so restore the data and show the instructions\n          try {\n            const parsedData = JSON.parse(savedData);\n            \n            // Restore the form data first (even though we're in instructions mode)\n            // This ensures the form data is available if we need to regenerate email content\n            \n            // Only update fields that exist in our form state\n            const validFields = Object.keys(formData).filter(key => \n              key !== 'error' && key !== 'loading'\n            );\n            \n            // Create a new form state with saved values\n            const restoredData = { ...formData };\n            \n            // Type guard for field state\n            const isFieldState = (obj: any): obj is FieldState => {\n              return obj && typeof obj === 'object' && 'value' in obj && 'valid' in obj;\n            };\n            \n            // Update fields from saved data\n            validFields.forEach(key => {\n              if (key === 'registrationType' && parsedData.registrationType) {\n                restoredData.registrationType = parsedData.registrationType as typeof REGISTER_PARTICIPANT | typeof REGISTER_SPEAKER;\n              } else if (key !== 'registrationType' && parsedData[key as keyof typeof parsedData]) {\n                const savedField = parsedData[key as keyof typeof parsedData] as Partial<FieldState>;\n                if (savedField && typeof savedField.value === 'string') {\n                  const typedKey = key as keyof typeof formData;\n                  const fieldData = restoredData[typedKey];\n                  \n                  // Use the type guard to ensure we have a field state\n                  if (isFieldState(fieldData)) {\n                    fieldData.value = savedField.value;\n                    fieldData.valid = validateField(key, savedField.value);\n                  }\n                }\n              }\n            });\n            \n            setFormData(restoredData);\n            \n            // After restoring form data, also update inputRefs\n            setTimeout(() => {\n              Object.keys(inputRefs.current).forEach(key => {\n                const input = inputRefs.current[key];\n                const fieldData = restoredData[key as keyof typeof restoredData];\n                \n                // Use the type guard here too\n                if (input && isFieldState(fieldData)) {\n                  input.value = fieldData.value;\n                }\n              });\n              \n              // Check if we have saved email data first\n              const savedEmailData = localStorage.getItem('caaeEmailData');\n              if (savedEmailData) {\n                try {\n                  const parsedEmailData = JSON.parse(savedEmailData);\n                  if (parsedEmailData.subject && parsedEmailData.body) {\n                    // Restore from saved email data\n                    setEmailData({\n                      subject: parsedEmailData.subject,\n                      body: parsedEmailData.body,\n                      copySuccess: ''\n                    });\n                    console.log('Restored email data from localStorage');\n                    // Make sure we're showing instructions, not email warning\n                    setShowInstructions(true);\n                    setShowEmailWarning(false);\n                    return;\n                  }\n                } catch (e) {\n                  console.error('Error parsing saved email data:', e);\n                }\n              }\n              \n              // If no saved email data or error, force regeneration from form data\n              const emailData = regenerateEmailDataFromForm();\n              if (emailData) {\n                setEmailData({\n                  subject: emailData.subject,\n                  body: emailData.body,\n                  copySuccess: ''\n                });\n                console.log('Email data regenerated for restored form');\n                \n                // Always show instructions initially\n                setShowInstructions(true);\n                setShowEmailWarning(false);\n                return;\n              }\n\n              // If we couldn't regenerate from form data, fall back to the old method\n              // Generate email data based on the restored values\n              // Create email subject\n              const emailSubject = `CAEA Conference Registration: ${restoredData.registrationType === REGISTER_SPEAKER ? 'Speaker' : 'Participant'} - ${restoredData.firstName.value} ${restoredData.lastName.value}`;\n              \n              // Create email body using the restored values\n              let emailBody = `\nRegistration Type: ${restoredData.registrationType === REGISTER_SPEAKER ? 'Speaker' : 'Participant'}\n\nPersonal Information:\n-------------------\nFirst Name: ${restoredData.firstName.value}\nLast Name: ${restoredData.lastName.value}\nMiddle Name: ${restoredData.middleName.value || 'N/A'}\nBirth Date: ${restoredData.birthDate.value || 'N/A'}\nInstitution: ${restoredData.institution.value || 'N/A'}\nCountry: ${restoredData.country.value || 'N/A'}\nEmail: ${restoredData.email.value || ''}\nPhone: ${restoredData.phone.value || 'N/A'}\n`;\n\n              // Add speaker-specific information if applicable\n              if (restoredData.registrationType === REGISTER_SPEAKER) {\n                emailBody += `\nPaper Information:\n----------------\nTitle: ${restoredData.paperTitle.value || ''}\nAbstract: ${restoredData.paperAbstract.value || ''}\nCo-Authors: ${restoredData.coAuthors.value || 'None'}\nKeywords: ${restoredData.keywords.value || 'N/A'}\n\nNote: Please attach your full paper in PDF format to this email.\n`;\n              }\n              \n              emailBody += `\nRegistration Date: ${new Date().toLocaleString()}\n`;\n\n              // Store email data in state for copy functionality (with linebreaks for display)\n              const displayEmailBody = emailBody.replace(/\\r\\n/g, '\\n');\n              setEmailData({\n                subject: emailSubject,\n                body: displayEmailBody,\n                copySuccess: ''\n              });\n              \n              // Save the email data to localStorage to ensure it persists between screen changes\n              try {\n                localStorage.setItem('caaeEmailData', JSON.stringify({\n                  subject: emailSubject,\n                  body: displayEmailBody\n                }));\n              } catch (error) {\n                console.error('Failed to save email data to localStorage:', error);\n              }\n              \n              console.log('Email body length:', emailBody.length);\n              setShowInstructions(true);\n              setShowEmailWarning(false);\n            }, 0);\n          } catch (error) {\n            console.error('Error parsing saved form data:', error);\n            \n            // Even if there was an error parsing the form data, try to regenerate email data\n            const emailData = regenerateEmailDataFromForm();\n            if (emailData) {\n              setEmailData({\n                subject: emailData.subject,\n                body: emailData.body,\n                copySuccess: ''\n              });\n              console.log('Email data regenerated after error parsing form data');\n              setShowInstructions(true);\n              setShowEmailWarning(false);\n            }\n          }\n        }\n        \n        return;\n      }\n      \n      const savedData = localStorage.getItem('caaeRegistrationForm');\n      if (savedData) {\n        const parsedData = JSON.parse(savedData) as Partial<typeof formData>;\n        \n        // Only update fields that exist in our form state\n        const validFields = Object.keys(formData).filter(key => \n          key !== 'error' && key !== 'loading'\n        );\n        \n        // Create a new form state with saved values\n        const restoredData = { ...formData };\n        \n        // Type guard for field state\n        const isFieldState = (obj: any): obj is FieldState => {\n          return obj && typeof obj === 'object' && 'value' in obj && 'valid' in obj;\n        };\n        \n        // Update fields from saved data\n        validFields.forEach(key => {\n          if (key === 'registrationType' && parsedData.registrationType) {\n            restoredData.registrationType = parsedData.registrationType as typeof REGISTER_PARTICIPANT | typeof REGISTER_SPEAKER;\n          } else if (key !== 'registrationType' && parsedData[key as keyof typeof parsedData]) {\n            const savedField = parsedData[key as keyof typeof parsedData] as Partial<FieldState>;\n            if (savedField && typeof savedField.value === 'string') {\n              const typedKey = key as keyof typeof formData;\n              const fieldData = restoredData[typedKey];\n              \n              // Use the type guard to ensure we have a field state\n              if (isFieldState(fieldData)) {\n                fieldData.value = savedField.value;\n                fieldData.valid = validateField(key, savedField.value);\n              }\n            }\n          }\n        });\n        \n        setFormData(restoredData);\n        \n        // After restoring, update the ref values for the fields\n        setTimeout(() => {\n          Object.keys(inputRefs.current).forEach(key => {\n            const input = inputRefs.current[key];\n            const fieldData = restoredData[key as keyof typeof restoredData];\n            \n            // Use the type guard here too\n            if (input && isFieldState(fieldData)) {\n              input.value = fieldData.value;\n            }\n          });\n        }, 0);\n      }\n    } catch (error) {\n      console.error('Error loading saved form data:', error);\n      // Clear potentially corrupted localStorage data\n      localStorage.removeItem('caaeRegistrationForm');\n      localStorage.removeItem('caaeEmailSending');\n    }\n  }, []);\n  \n  // Save form data to localStorage when it changes\n  useEffect(() => {\n    // Create an object to store saved form data\n    interface SavedFormData {\n      registrationType: string;\n      [key: string]: unknown;\n    }\n    \n    // Type guard for field state (reused here)\n    const isFieldState = (obj: any): obj is FieldState => {\n      return obj && typeof obj === 'object' && 'value' in obj && 'valid' in obj;\n    };\n    \n    // Only save the registration type and field values, not validation state\n    const dataToSave: SavedFormData = {\n      registrationType: formData.registrationType\n    };\n    \n    // Add field values\n    Object.entries(formData).forEach(([key, field]) => {\n      if (key !== 'registrationType' && key !== 'error' && key !== 'loading') {\n        // Use the type guard to check if this is a field state\n        if (isFieldState(field)) {\n          // For each field, save its current value from the ref if available\n          if (inputRefs.current[key]) {\n            const currentValue = inputRefs.current[key]?.value || field.value;\n            dataToSave[key] = { value: currentValue };\n          } else {\n            dataToSave[key] = { value: field.value };\n          }\n        }\n      }\n    });\n    \n    // Show saving indicator\n    setIsSaving(true);\n    \n    // Save to localStorage\n    localStorage.setItem('caaeRegistrationForm', JSON.stringify(dataToSave));\n    \n    // Hide saving indicator after a short delay\n    const timer = setTimeout(() => {\n      setIsSaving(false);\n    }, 1000);\n    \n    return () => clearTimeout(timer);\n  }, [formData]);\n\n  // Validate email format\n  const validateEmail = (email: string) => {\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return re.test(email.toLowerCase());\n  };\n  \n  // Validate date is not in the future and not unreasonably in the past\n  const validateDate = (dateString: string): boolean => {\n    if (!dateString) return true; // Empty date is valid (not required)\n    \n    const inputDate = new Date(dateString);\n    \n    // Check if date is valid\n    if (isNaN(inputDate.getTime())) return false;\n    \n    // Check if date is not in the future - set hours to 0 to compare just the dates\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Set to beginning of day for fair comparison\n    if (inputDate > today) return false;\n    \n    // Check if date is not unreasonably in the past (more than 120 years ago)\n    const minDate = new Date();\n    minDate.setFullYear(today.getFullYear() - 120);\n    if (inputDate < minDate) return false;\n    \n    return true;\n  };\n  \n  // Validation helper function\n  const validateField = (fieldName: string, value: string): boolean => {\n    switch (fieldName) {\n      case 'firstName':\n      case 'lastName':\n        return value.trim().length > 0;\n      case 'email':\n        return validateEmail(value);\n      case 'birthDate':\n        return validateDate(value);\n      case 'paperTitle':\n      case 'paperAbstract':\n        return formData.registrationType !== REGISTER_SPEAKER || value.trim().length > 0;\n      default:\n        return true;\n    }\n  };\n\n  // Update validation for speaker fields when registration type changes\n  useEffect(() => {\n    // Only update validation state for speaker-specific fields\n    if (formData.registrationType === REGISTER_SPEAKER) {\n      // Get current values from refs\n      const paperTitleValue = inputRefs.current.paperTitle?.value || '';\n      const paperAbstractValue = inputRefs.current.paperAbstract?.value || '';\n      \n      setFormData(prev => {\n        return {\n          ...prev,\n          paperTitle: {\n            ...prev.paperTitle,\n            value: paperTitleValue,\n            valid: prev.paperTitle.touched ? validateField('paperTitle', paperTitleValue) : prev.paperTitle.valid,\n            errorMessage: prev.paperTitle.touched && !validateField('paperTitle', paperTitleValue) \n              ? 'Paper title is required for speakers' \n              : prev.paperTitle.errorMessage\n          },\n          paperAbstract: {\n            ...prev.paperAbstract,\n            value: paperAbstractValue,\n            valid: prev.paperAbstract.touched ? validateField('paperAbstract', paperAbstractValue) : prev.paperAbstract.valid,\n            errorMessage: prev.paperAbstract.touched && !validateField('paperAbstract', paperAbstractValue) \n              ? 'Abstract is required for speakers' \n              : prev.paperAbstract.errorMessage\n          }\n        };\n      });\n    } else {\n      // When switching from speaker to participant, make paper fields valid\n      setFormData(prev => ({\n        ...prev,\n        paperTitle: {\n          ...prev.paperTitle,\n          valid: true,\n          errorMessage: ''\n        },\n        paperAbstract: {\n          ...prev.paperAbstract,\n          valid: true,\n          errorMessage: ''\n        }\n      }));\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [formData.registrationType]);\n\n  // Special handling for registration type change\n  const handleRegistrationTypeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      registrationType: value\n    }));\n  };\n  \n  // Handle blur to validate and update state based on input value\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    \n    // On blur we validate and mark as touched\n    const valid = validateField(name, value);\n    let errorMessage = '';\n    \n    if (!valid) {\n      if (name === 'firstName') errorMessage = 'First name is required';\n      else if (name === 'lastName') errorMessage = 'Last name is required';\n      else if (name === 'email') errorMessage = 'Valid email address is required';\n      else if (name === 'birthDate') errorMessage = 'Please enter a valid date (not in the future and not too far in the past)';\n      else if (name === 'paperTitle') errorMessage = 'Paper title is required for speakers';\n      else if (name === 'paperAbstract') errorMessage = 'Abstract is required for speakers';\n    }\n    \n    // Update state with the current value from the input field\n    setFormData(prev => ({\n      ...prev,\n      [name]: {\n        ...(prev[name as keyof typeof prev] as FieldState),\n        value, // Get the value directly from the input\n        valid,\n        touched: true,\n        errorMessage\n      }\n    }));\n  };\n\n  // Handle date change - validate immediately\n  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    \n    // Validate the date immediately\n    const valid = validateDate(value);\n    let errorMessage = '';\n    \n    if (!valid) {\n      errorMessage = 'Please enter a valid date (not in the future and not too far in the past)';\n    }\n    \n    // Update state with the current value and validation result\n    setFormData(prev => ({\n      ...prev,\n      [name]: {\n        ...(prev[name as keyof typeof prev] as FieldState),\n        value,\n        valid,\n        touched: true,\n        errorMessage\n      }\n    }));\n  };\n\n  // Field input component with validation\n  const FormField = ({ \n    label, \n    name, \n    type = 'text', \n    required = false,\n    placeholder = '',\n    tooltip = '',\n    rows = 1\n  }: { \n    label: string; \n    name: string; \n    type?: string;\n    required?: boolean;\n    placeholder?: string;\n    tooltip?: string;\n    rows?: number;\n  }) => {\n    const field = formData[name as keyof typeof formData] as FieldState;\n    const showError = !field.valid && field.touched;\n    \n    // Create the ref for this input\n    const setInputRef = (el: HTMLInputElement | HTMLTextAreaElement | null) => {\n      inputRefs.current[name] = el;\n    };\n    \n    // Simple tooltip toggling with stopPropagation to prevent focus loss\n    const handleTooltipToggle = (e: React.MouseEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setActiveTooltip(activeTooltip === name ? null : name);\n    };\n    \n    // Prevent default behavior on keydown to avoid form submission\n    const handleKeyDown = (e: React.KeyboardEvent) => {\n      if (e.key === 'Enter' && type !== 'textarea') {\n        e.preventDefault();\n      }\n    };\n    \n    // Get today's date as a string for max attribute\n    const today = new Date().toISOString().split('T')[0];\n    \n    // Calculate min date (120 years ago)\n    const minDate = new Date();\n    minDate.setFullYear(minDate.getFullYear() - 120);\n    const minDateString = minDate.toISOString().split('T')[0];\n    \n    // Date props\n    const dateProps = type === 'date' ? { \n      max: today,\n      min: minDateString,\n      onChange: handleDateChange // Special handler for date inputs\n    } : {};\n    \n    return (\n      <div className=\"relative\">\n        <div className=\"flex items-center\">\n          <label htmlFor={name} className=\"block text-sm font-medium text-gray-700\">\n            {label} {required && <span className=\"text-red-500\">*</span>}\n          </label>\n          {tooltip && (\n            <div className=\"relative ml-2\" onClick={e => e.stopPropagation()}>\n              <button\n                type=\"button\"\n                onClick={handleTooltipToggle}\n                onMouseDown={(e) => e.preventDefault()}\n                className=\"text-gray-400 hover:text-gray-500 focus:outline-none\"\n                aria-label=\"Show tooltip\"\n              >\n                <Icon icon={FaIcons.FaInfoCircle} className=\"h-4 w-4\" />\n              </button>\n              {activeTooltip === name && (\n                <div \n                  className=\"absolute z-10 mt-2 w-72 px-3 py-2 bg-gray-800 text-white text-xs rounded shadow-lg -left-32 top-6\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  {tooltip}\n                  <div className=\"absolute -top-1 left-1/2 transform -translate-x-1/2 w-2 h-2 rotate-45 bg-gray-800\"></div>\n                </div>\n              )}\n            </div>\n          )}\n          {field.touched && (\n            <div className=\"ml-auto\">\n              {field.valid ? \n                <Icon icon={FaIcons.FaCheck} className=\"h-4 w-4 text-green-500\" /> : \n                <Icon icon={FaIcons.FaTimes} className=\"h-4 w-4 text-red-500\" />\n              }\n            </div>\n          )}\n        </div>\n        <div className=\"mt-1 relative\">\n          {type === 'textarea' ? (\n            <textarea\n              id={name}\n              name={name}\n              rows={rows}\n              ref={setInputRef}\n              defaultValue={field.value}\n              onKeyDown={handleKeyDown}\n              onBlur={handleBlur}\n              placeholder={placeholder}\n              className={`shadow-sm block w-full sm:text-sm rounded-md ${\n                showError \n                  ? 'border-red-300 text-red-900 placeholder-red-300 focus:ring-red-500 focus:border-red-500' \n                  : 'border-gray-300 focus:ring-primary focus:border-primary'\n              }`}\n            />\n          ) : (\n            <input\n              type={type}\n              id={name}\n              name={name}\n              ref={setInputRef}\n              defaultValue={field.value}\n              onKeyDown={handleKeyDown}\n              onBlur={handleBlur}\n              placeholder={placeholder}\n              {...dateProps}\n              className={`shadow-sm block w-full sm:text-sm rounded-md ${\n                showError \n                  ? 'border-red-300 text-red-900 placeholder-red-300 focus:ring-red-500 focus:border-red-500' \n                  : 'border-gray-300 focus:ring-primary focus:border-primary'\n              }`}\n            />\n          )}\n        </div>\n        {showError && (\n          <p className=\"mt-1 text-xs text-red-600 field-error\">{field.errorMessage}</p>\n        )}\n      </div>\n    );\n  };\n\n  // Check if form is valid - now using refs to get current values\n  const isFormValid = () => {\n    const requiredFields = ['firstName', 'lastName', 'email'];\n    \n    if (formData.registrationType === REGISTER_SPEAKER) {\n      requiredFields.push('paperTitle', 'paperAbstract');\n    }\n    \n    // Check each required field by getting its current value from the ref\n    return requiredFields.every(field => {\n      const value = inputRefs.current[field]?.value || '';\n      return validateField(field, value);\n    });\n  };\n\n  // Show email instructions when form is valid\n  const [showInstructions, setShowInstructions] = useState(false);\n  \n  // Add state for showing email warning \n  const [showEmailWarning, setShowEmailWarning] = useState(false);\n  \n  // Add a loading state for the email button\n  const [isEmailButtonLoading, setIsEmailButtonLoading] = useState(false);\n  \n  // Add this new function to directly rebuild email data from form data anytime\n  const regenerateEmailDataFromForm = () => {\n    try {\n      // Try to get the form data from localStorage first\n      const savedFormData = localStorage.getItem('caaeRegistrationForm');\n      if (!savedFormData) {\n        console.error('No saved form data available to regenerate email');\n        return null;\n      }\n      \n      const parsedFormData = JSON.parse(savedFormData);\n      \n      // Extract values from the saved form data\n      const registrationType = parsedFormData.registrationType || 'participant';\n      const firstName = parsedFormData.firstName?.value || '';\n      const lastName = parsedFormData.lastName?.value || '';\n      const middleName = parsedFormData.middleName?.value || 'N/A';\n      const birthDate = parsedFormData.birthDate?.value || 'N/A';\n      const institution = parsedFormData.institution?.value || 'N/A';\n      const country = parsedFormData.country?.value || 'N/A';\n      const email = parsedFormData.email?.value || '';\n      const phone = parsedFormData.phone?.value || 'N/A';\n      \n      // Create email subject\n      const emailSubject = `CAEA Conference Registration: ${registrationType === REGISTER_SPEAKER ? 'Speaker' : 'Participant'} - ${firstName} ${lastName}`;\n      \n      // Create email body\n      let emailBody = `Registration Type: ${registrationType === REGISTER_SPEAKER ? 'Speaker' : 'Participant'}\\n\\n`;\n      emailBody += `Personal Information:\\n`;\n      emailBody += `-------------------\\n`;\n      emailBody += `First Name: ${firstName}\\n`;\n      emailBody += `Last Name: ${lastName}\\n`;\n      emailBody += `Middle Name: ${middleName}\\n`;\n      emailBody += `Birth Date: ${birthDate}\\n`;\n      emailBody += `Institution: ${institution}\\n`;\n      emailBody += `Country: ${country}\\n`;\n      emailBody += `Email: ${email}\\n`;\n      emailBody += `Phone: ${phone}\\n`;\n      \n      // Add speaker-specific information if applicable\n      if (registrationType === REGISTER_SPEAKER) {\n        const paperTitle = parsedFormData.paperTitle?.value || '';\n        const paperAbstract = parsedFormData.paperAbstract?.value || '';\n        const coAuthors = parsedFormData.coAuthors?.value || 'None';\n        const keywords = parsedFormData.keywords?.value || 'N/A';\n        \n        emailBody += `\\nPaper Information:\\n`;\n        emailBody += `----------------\\n`;\n        emailBody += `Title: ${paperTitle}\\n`;\n        emailBody += `Abstract: ${paperAbstract}\\n`;\n        emailBody += `Co-Authors: ${coAuthors}\\n`;\n        emailBody += `Keywords: ${keywords}\\n\\n`;\n        emailBody += `Note: Please attach your full paper in PDF format to this email.\\n`;\n      }\n      \n      emailBody += `\\nRegistration Date: ${new Date().toLocaleString()}\\n`;\n      \n      // Save and return the regenerated email data\n      const emailData = {\n        subject: emailSubject,\n        body: emailBody\n      };\n      \n      // Save to localStorage\n      localStorage.setItem('caaeEmailData', JSON.stringify(emailData));\n      console.log('Email data regenerated from saved form data');\n      \n      return emailData;\n    } catch (error) {\n      console.error('Error regenerating email data from form:', error);\n      return null;\n    }\n  };\n\n  // Modify the proceedWithEmail function to use our robust regeneration function\n  const proceedWithEmail = () => {\n    try {\n      // Prevent multiple clicks\n      if (isEmailButtonLoading) return;\n      \n      // Set loading state\n      setIsEmailButtonLoading(true);\n      \n      // Ensure all form field values are updated with the latest input values\n      const updatedFields = Object.fromEntries(\n        Object.entries(formData)\n          .filter(([key]) => key !== 'registrationType' && key !== 'error' && key !== 'loading')\n          .map(([key, field]) => {\n            const fieldState = field as FieldState;\n            const currentValue = inputRefs.current[key]?.value || fieldState.value;\n            return [key, { \n              ...fieldState, \n              value: currentValue,\n              valid: validateField(key, currentValue)\n            }];\n          })\n      );\n      \n      // Update formData state with the latest values\n      setFormData(prev => ({\n        ...prev,\n        ...updatedFields\n      }));\n      \n      // Force save data immediately to ensure it's up to date\n      const isFormDataSaved = saveFormBeforeCriticalAction();\n      console.log('Form data saved before email:', isFormDataSaved);\n      \n      // Use our robust regeneration function instead of building the email directly\n      const emailData = regenerateEmailDataFromForm();\n      if (!emailData) {\n        console.error('Failed to regenerate email data in proceedWithEmail');\n        setIsEmailButtonLoading(false);\n        alert('There was a problem preparing your email. Please try again or use the manual option.');\n        return;\n      }\n      \n      // Store email data in state\n      setEmailData({\n        subject: emailData.subject,\n        body: emailData.body,\n        copySuccess: ''\n      });\n      \n      // Set a flag in localStorage to indicate we're in email sending mode\n      localStorage.setItem('caaeEmailSending', 'true');\n      \n      // Get the raw email body for mailto link\n      const emailBody = emailData.body.replace(/\\n/g, '\\r\\n');\n\n      // Check if the email body is too long (some email clients have limitations)\n      if (emailBody.length > 2000) {\n        // If email body is too long, show warning and don't try to open email client\n        setShowEmailWarning(true);\n        alert('Your email content may be too long for automatic filling. Please use the manual option to copy the email content.');\n        setIsEmailButtonLoading(false);\n        return;\n      }\n\n      // Properly encode the subject and body for mailto URL\n      // Use encodeURIComponent for proper handling of special characters\n      const encodedSubject = encodeURIComponent(emailData.subject);\n      const encodedBody = encodeURIComponent(emailBody);\n      \n      // Create mailto URL with properly encoded components\n      const mailtoURL = `mailto:${encodeURIComponent(REGISTRATION_EMAIL)}?subject=${encodedSubject}&body=${encodedBody}`;\n      \n      // Set a timeout to reset the loading state after 5 seconds regardless of the outcome\n      setTimeout(() => {\n        setIsEmailButtonLoading(false);\n      }, 5000);\n      \n      // Show warning and instructions BEFORE opening email client\n      // This ensures warning screen has the data before email client opens\n      setShowEmailWarning(true);\n      \n      // Use a timeout to allow the UI to update before opening email client\n      setTimeout(() => {\n        try {\n          // Create a flag to track if we've successfully opened an email client\n          let emailClientOpened = false;\n          \n          // Create an invisible anchor element for more reliable mailto handling\n          const mailtoLink = document.createElement('a');\n          mailtoLink.href = mailtoURL;\n          mailtoLink.style.display = 'none';\n          document.body.appendChild(mailtoLink);\n          \n          // Try to open using the anchor click method first\n          try {\n            mailtoLink.click();\n            emailClientOpened = true;\n            console.log('Email client opened via anchor click method');\n          } catch (clickError) {\n            console.error('Error using anchor click method:', clickError);\n          }\n          \n          // Clean up the anchor element\n          setTimeout(() => {\n            document.body.removeChild(mailtoLink);\n          }, 100);\n          \n          // Only try fallback methods if the first method failed or if we're still on the same page\n          setTimeout(() => {\n            // Only attempt fallback if we're still focused on the page (indicating the email client didn't open)\n            if (!emailClientOpened && document.hasFocus()) {\n              console.log('Email client may not have opened, trying fallback method: window.open');\n              \n              // Try window.open as a fallback\n              try {\n                const newWindow = window.open(mailtoURL, '_blank');\n                if (newWindow && !newWindow.closed) {\n                  emailClientOpened = true;\n                  console.log('Email client opened via window.open method');\n                } else {\n                  // Final fallback - only use this if nothing else worked\n                  console.log('Fallback window.open failed, using location.href as last resort');\n                  window.location.href = mailtoURL;\n                }\n              } catch (e) {\n                console.error('Fallback window.open failed:', e);\n                // Last resort, if we haven't opened the client yet\n                if (!emailClientOpened) {\n                  console.log('Using location.href as final attempt');\n                  window.location.href = mailtoURL;\n                }\n              }\n            }\n          }, 500);\n        } catch (e) {\n          console.error('Error in all email opening attempts:', e);\n          // Last resort fallback\n          window.location.href = mailtoURL;\n        }\n      }, 300);\n      \n    } catch (error) {\n      console.error('Error in proceedWithEmail:', error);\n      setFormData(prev => ({\n        ...prev,\n        error: 'Failed to open email client. Please try the manual email option instead.',\n        loading: false\n      }));\n      \n      // Make sure we still have the email data for manual option\n      alert('Unable to open your email client automatically. Please use the \"Option 1: Manual Email\" method instead.');\n      \n      // Reset loading state on error\n      setIsEmailButtonLoading(false);\n    }\n  };\n\n  // Copy email content to clipboard\n  const copyToClipboard = (content: string, type: string) => {\n    // Try using the modern Clipboard API first\n    if (navigator.clipboard && window.isSecureContext) {\n      // Modern browser with secure context (HTTPS)\n      navigator.clipboard.writeText(content)\n        .then(() => {\n          // Set specific success message based on what was copied\n          const successMessage = `${type} Copied!`;\n          setEmailData(prev => ({ ...prev, copySuccess: successMessage }));\n          \n          // Show success message for 2 seconds\n          setTimeout(() => {\n            setEmailData(prev => ({ ...prev, copySuccess: '' }));\n          }, 2000);\n        })\n        .catch(err => {\n          console.error('Could not copy text using Clipboard API: ', err);\n          // Fall back to the execCommand method\n          fallbackCopyToClipboard();\n        });\n    } else {\n      // Fall back to the older document.execCommand method\n      fallbackCopyToClipboard();\n    }\n    \n    // Fallback method for older browsers or non-secure contexts\n    function fallbackCopyToClipboard() {\n      try {\n        // Create a temporary textarea element to hold the text\n        const textarea = document.createElement('textarea');\n        textarea.value = content;\n        \n        // Make the textarea out of viewport to hide it\n        textarea.style.position = 'fixed';\n        textarea.style.left = '-999999px';\n        textarea.style.top = '-999999px';\n        document.body.appendChild(textarea);\n        \n        // Focus and select the text\n        textarea.focus();\n        textarea.select();\n        \n        // Execute copy command\n        const successful = document.execCommand('copy');\n        if (successful) {\n          // Set specific success message based on what was copied\n          const successMessage = `${type} Copied!`;\n          setEmailData(prev => ({ ...prev, copySuccess: successMessage }));\n          \n          // Show success message for 2 seconds\n          setTimeout(() => {\n            setEmailData(prev => ({ ...prev, copySuccess: '' }));\n          }, 2000);\n        } else {\n          console.error('Copy was unsuccessful');\n          setEmailData(prev => ({ ...prev, copySuccess: 'Failed to copy' }));\n        }\n        \n        // Clean up the temporary element\n        document.body.removeChild(textarea);\n      } catch (err) {\n        console.error('Could not copy text: ', err);\n        setEmailData(prev => ({ ...prev, copySuccess: 'Failed to copy' }));\n        \n        // Provide instructions for manual copy if everything fails\n        alert(`Please manually copy this ${type.toLowerCase()}: \\n\\n${content}`);\n      }\n    }\n  };\n\n  // Step indicator\n  const StepIndicator = () => (\n    <div className=\"mb-10\">\n      <div className=\"flex items-center justify-center\">\n        <div className={`flex items-center justify-center w-10 h-10 rounded-full ${!showInstructions ? 'bg-primary text-white' : 'bg-gray-200 text-gray-700'}`}>\n          1\n        </div>\n        <div className={`h-1 w-24 ${showInstructions ? 'bg-primary' : 'bg-gray-200'}`}></div>\n        <div className={`flex items-center justify-center w-10 h-10 rounded-full ${showInstructions ? 'bg-primary text-white' : 'bg-gray-200 text-gray-700'}`}>\n          2\n        </div>\n      </div>\n      <div className=\"flex justify-center mt-2 text-sm\">\n        <div className={`w-24 text-center ${!showInstructions ? 'font-medium text-primary' : 'text-gray-500'}`}>\n          Fill Info\n        </div>\n        <div className=\"w-24\"></div>\n        <div className={`w-24 text-center ${showInstructions ? 'font-medium text-primary' : 'text-gray-500'}`}>\n          Finalize\n        </div>\n      </div>\n    </div>\n  );\n\n  // Add a state for completed registration\n  const [registrationComplete, setRegistrationComplete] = useState(false);\n\n  // Create a helper function to synchronize form data before critical actions\n  const saveFormBeforeCriticalAction = () => {\n    // Create an object to store saved form data\n    interface SavedFormData {\n      registrationType: string;\n      [key: string]: unknown;\n    }\n    \n    const isFieldState = (obj: any): obj is FieldState => {\n      return obj && typeof obj === 'object' && 'value' in obj && 'valid' in obj;\n    };\n    \n    // Get the most current data from the form\n    const dataToSave: SavedFormData = {\n      registrationType: formData.registrationType\n    };\n    \n    // Add field values directly from the DOM inputs, making sure to capture all field values\n    Object.entries(formData).forEach(([key, field]) => {\n      if (key !== 'registrationType' && key !== 'error' && key !== 'loading') {\n        if (isFieldState(field)) {\n          const currentValue = inputRefs.current[key]?.value || field.value;\n          \n          // Store the current DOM value for each field\n          dataToSave[key] = { \n            value: currentValue,\n            valid: validateField(key, currentValue)\n          };\n        }\n      }\n    });\n    \n    // Force synchronous save to localStorage\n    localStorage.setItem('caaeRegistrationForm', JSON.stringify(dataToSave));\n    localStorage.setItem('caaeEmailSending', 'true');\n    \n    return true;\n  }\n\n  // Add a function to reset the registration flow\n  const resetRegistrationFlow = () => {\n    setShowInstructions(false);\n    setShowEmailWarning(false);\n    \n    // Clear email sending flag but keep form data\n    localStorage.removeItem('caaeEmailSending');\n    \n    // Ensure all values from localStorage are applied to form fields\n    try {\n      const savedData = localStorage.getItem('caaeRegistrationForm');\n      if (savedData) {\n        const parsedData = JSON.parse(savedData);\n        \n        // After resetting to form view, update all input refs with the latest values\n        setTimeout(() => {\n          Object.keys(inputRefs.current).forEach(key => {\n            const input = inputRefs.current[key];\n            if (input && parsedData[key] && parsedData[key].value !== undefined) {\n              input.value = parsedData[key].value;\n            }\n          });\n        }, 0);\n      }\n    } catch (error) {\n      console.error('Error restoring form data while resetting flow:', error);\n    }\n  }\n\n  // Add a function to mark registration as complete and ONLY NOW clear data\n  const completeRegistration = () => {\n    // Only when the user confirms \"I've Sent My Email\", clear the data\n    localStorage.removeItem('caaeRegistrationForm');\n    localStorage.removeItem('caaeEmailSending');\n    localStorage.removeItem('caaeEmailData');\n    setRegistrationComplete(true);\n    \n    // Show a success message to confirm data has been cleared\n    console.log('Registration data cleared successfully');\n  };\n\n  // Modify the handlePreview function to ensure data is saved\n  const handlePreview = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Mark all fields as touched and validate them using current values from refs\n    const updatedFields = Object.fromEntries(\n      Object.entries(formData)\n        .filter(([key]) => key !== 'registrationType' && key !== 'error' && key !== 'loading')\n        .map(([key, field]) => {\n          const fieldState = field as FieldState;\n          const currentValue = inputRefs.current[key]?.value || fieldState.value;\n          return [key, { \n            ...fieldState, \n            value: currentValue,\n            touched: true,\n            valid: validateField(key, currentValue),\n            errorMessage: !validateField(key, currentValue) ? (\n              key === 'firstName' ? 'First name is required' : \n              key === 'lastName' ? 'Last name is required' : \n              key === 'email' ? 'Valid email address is required' : \n              key === 'birthDate' ? 'Please enter a valid date (not in the future and not too far in the past)' : \n              key === 'paperTitle' ? 'Paper title is required for speakers' : \n              key === 'paperAbstract' ? 'Abstract is required for speakers' : ''\n            ) : ''\n          }];\n        })\n    );\n    \n    setFormData(prev => ({\n      ...prev,\n      ...updatedFields\n    }));\n    \n    // Check if form is valid\n    if (isFormValid()) {\n      // Force save form data before continuing\n      saveFormBeforeCriticalAction();\n      \n      // Generate email data right away when moving to instructions screen\n      // Create email subject\n      const emailSubject = `CAEA Conference Registration: ${formData.registrationType === REGISTER_SPEAKER ? 'Speaker' : 'Participant'} - ${inputRefs.current.firstName?.value || ''} ${inputRefs.current.lastName?.value || ''}`;\n      \n      // Create email body\n      let emailBody = `\nRegistration Type: ${formData.registrationType === REGISTER_SPEAKER ? 'Speaker' : 'Participant'}\n\nPersonal Information:\n-------------------\nFirst Name: ${inputRefs.current.firstName?.value || ''}\nLast Name: ${inputRefs.current.lastName?.value || ''}\nMiddle Name: ${inputRefs.current.middleName?.value || 'N/A'}\nBirth Date: ${inputRefs.current.birthDate?.value || 'N/A'}\nInstitution: ${inputRefs.current.institution?.value || 'N/A'}\nCountry: ${inputRefs.current.country?.value || 'N/A'}\nEmail: ${inputRefs.current.email?.value || ''}\nPhone: ${inputRefs.current.phone?.value || 'N/A'}\n`;\n\n      // Add speaker-specific information if applicable\n      if (formData.registrationType === REGISTER_SPEAKER) {\n        emailBody += `\nPaper Information:\n----------------\nTitle: ${inputRefs.current.paperTitle?.value || ''}\nAbstract: ${inputRefs.current.paperAbstract?.value || ''}\nCo-Authors: ${inputRefs.current.coAuthors?.value || 'None'}\nKeywords: ${inputRefs.current.keywords?.value || 'N/A'}\n\nNote: Please attach your full paper in PDF format to this email.\n`;\n      }\n      \n      emailBody += `\nRegistration Date: ${new Date().toLocaleString()}\n`;\n\n      // Store email data in state for manual copy option\n      setEmailData({\n        subject: emailSubject,\n        body: emailBody,\n        copySuccess: ''\n      });\n      \n      setShowInstructions(true);\n    } else {\n      setFormData(prev => ({\n        ...prev,\n        error: 'Please correct the errors in the form before continuing'\n      }));\n      \n      // Scroll to the first error field\n      setTimeout(() => {\n        const firstErrorField = document.querySelector('.field-error');\n        if (firstErrorField) {\n          firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n      }, 100);\n    }\n  };\n\n  // Modify the useEffect specifically for email warning state to use our more robust regeneration function\n  useEffect(() => {\n    // This effect runs when showEmailWarning changes\n    if (showEmailWarning) {\n      // When showing email warning, ensure we have the email data available\n      try {\n        // First try to get email data from localStorage\n        const savedEmailData = localStorage.getItem('caaeEmailData');\n        if (savedEmailData) {\n          const parsedEmailData = JSON.parse(savedEmailData);\n          if (parsedEmailData.subject && parsedEmailData.body) {\n            // Restore from saved email data\n            setEmailData({\n              subject: parsedEmailData.subject,\n              body: parsedEmailData.body,\n              copySuccess: ''\n            });\n            console.log('Email data restored when showing warning screen');\n            return;\n          }\n        }\n        \n        // If no email data in localStorage, try to regenerate it from form data\n        const emailData = regenerateEmailDataFromForm();\n        if (emailData) {\n          setEmailData({\n            subject: emailData.subject,\n            body: emailData.body,\n            copySuccess: ''\n          });\n          console.log('Email data regenerated for warning screen');\n        } else {\n          console.error('Failed to regenerate email data for warning screen');\n        }\n      } catch (error) {\n        console.error('Error restoring email data for warning screen:', error);\n      }\n    }\n  }, [showEmailWarning]);\n\n  if (showInstructions) {\n    return (\n      <div className=\"max-w-3xl mx-auto py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-extrabold text-gray-900 sm:text-4xl\">\n            Conference Registration\n          </h1>\n          <p className=\"mt-4 text-xl text-gray-500 max-w-3xl mx-auto\">\n            Register for the Central Asian Economics Association Conference 2023\n          </p>\n        </div>\n        \n        <StepIndicator />\n        \n        <div className=\"bg-white shadow-lg rounded-lg overflow-hidden transition-all duration-300 transform translate-y-0 hover:translate-y-[-5px]\">\n          <div className=\"bg-gradient-to-r from-primary to-secondary py-6 px-6\">\n            <h2 className=\"text-2xl font-bold text-white\">Complete Your Registration</h2>\n          </div>\n          <div className=\"px-6 py-8 sm:p-8\">\n            <div className=\"text-center\">\n              {registrationComplete ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"mx-auto h-20 w-20 text-green-500 bg-green-100 rounded-full flex items-center justify-center\">\n                    <Icon icon={FaIcons.FaCheckCircle} className=\"h-12 w-12\" />\n                  </div>\n                  <h3 className=\"mt-4 text-2xl font-medium text-gray-900\">Registration Complete!</h3>\n                  <p className=\"mt-3 text-lg text-gray-600\">\n                    Thank you for registering for the CAEA Conference 2023. We'll be in touch soon!\n                  </p>\n                  <div className=\"mt-8\">\n                    <button\n                      onClick={() => window.location.href = '/'}\n                      className=\"inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-primary hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary\"\n                    >\n                      Return to Home\n                    </button>\n                  </div>\n                </div>\n              ) : showEmailWarning ? (\n                <div className=\"text-center py-6\">\n                  <div className=\"mx-auto h-20 w-20 text-yellow-500 bg-yellow-100 rounded-full flex items-center justify-center\">\n                    <Icon icon={FaIcons.FaExclamationTriangle} className=\"h-12 w-12\" />\n                  </div>\n                  <h3 className=\"mt-4 text-2xl font-medium text-gray-900\">Attempting to Open Email Client</h3>\n                  <p className=\"mt-3 text-lg text-gray-600\">\n                    Your email client should be opening in a new window or tab. Please check if it has opened with the registration information.\n                  </p>\n                  <div className=\"mt-6 bg-yellow-50 p-4 rounded-md text-left\">\n                    <p className=\"font-medium text-yellow-800\">If your email client didn't open correctly or the email is empty/incomplete:</p>\n                    <ol className=\"mt-2 ml-4 text-sm text-yellow-700 list-decimal\">\n                      <li className=\"mb-2\">Click the \"Return to Instructions\" button below</li>\n                      <li className=\"mb-2\">Use the \"Option 1: Manual Email\" method instead (recommended)</li>\n                      <li className=\"mb-2\">Copy each section and paste into your email client manually</li>\n                      <li>Return to this page after sending your email</li>\n                    </ol>\n                    <div className=\"mt-3 p-3 bg-blue-50 rounded-md text-blue-800 text-sm\">\n                      <strong>Common issues:</strong> \n                      <ul className=\"list-disc ml-4 mt-1\">\n                        <li>Some browsers restrict automatic email opening for security reasons</li>\n                        <li>Email clients may limit the amount of text that can be auto-filled</li>\n                        <li>The manual method works reliably in all cases</li>\n                      </ul>\n                    </div>\n                  </div>\n                  \n                  {/* Show manual email content directly in the warning screen */}\n                  <div className=\"mt-6 bg-white p-6 rounded-lg border-2 border-green-500 shadow-md\">\n                    <h4 className=\"text-lg font-medium text-gray-900 mb-2\">Manual Email Option</h4>\n                    <p className=\"text-gray-600 mb-4\">\n                      Copy and paste the following details to send your registration:\n                    </p>\n                    \n                    <div className=\"text-left space-y-4\">\n                      <div>\n                        <div className=\"flex justify-between items-center mb-2\">\n                          <p className=\"text-sm font-medium text-gray-700\">Send To:</p>\n                        </div>\n                        <div className=\"flex\">\n                          <input \n                            type=\"text\" \n                            readOnly \n                            value={REGISTRATION_EMAIL}\n                            className=\"border border-gray-300 flex-grow rounded-l-md text-sm py-3 px-3 bg-gray-50\"\n                          />\n                          <button\n                            onClick={() => copyToClipboard(REGISTRATION_EMAIL, 'Email')}\n                            className=\"bg-gray-200 hover:bg-gray-300 py-3 px-4 rounded-r-md transition-colors\"\n                            aria-label=\"Copy email address\"\n                            title=\"Copy to clipboard\"\n                          >\n                            <Icon icon={FaIcons.FaCopy} className=\"h-5 w-5 text-gray-600\" />\n                          </button>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <div className=\"flex justify-between items-center mb-2\">\n                          <p className=\"text-sm font-medium text-gray-700\">Subject:</p>\n                        </div>\n                        <div className=\"flex\">\n                          <input \n                            type=\"text\" \n                            readOnly \n                            value={emailData.subject}\n                            className=\"border border-gray-300 flex-grow rounded-l-md text-sm py-3 px-3 bg-gray-50\"\n                          />\n                          <button\n                            onClick={() => copyToClipboard(emailData.subject, 'Subject')}\n                            className=\"bg-gray-200 hover:bg-gray-300 py-3 px-4 rounded-r-md transition-colors\"\n                            aria-label=\"Copy subject\"\n                            title=\"Copy to clipboard\"\n                          >\n                            <Icon icon={FaIcons.FaCopy} className=\"h-5 w-5 text-gray-600\" />\n                          </button>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <div className=\"flex justify-between items-center mb-2\">\n                          <p className=\"text-sm font-medium text-gray-700\">Email Body:</p>\n                        </div>\n                        <div className=\"relative\">\n                          <textarea\n                            readOnly\n                            rows={6}\n                            value={emailData.body}\n                            className=\"w-full border border-gray-300 rounded-md text-sm py-3 px-3 bg-gray-50\"\n                          />\n                          <button\n                            onClick={() => copyToClipboard(emailData.body, 'Body')}\n                            className=\"absolute top-2 right-2 bg-gray-200 hover:bg-gray-300 p-3 rounded-md transition-colors shadow-sm\"\n                            aria-label=\"Copy email body\"\n                            title=\"Copy to clipboard\"\n                          >\n                            <Icon icon={FaIcons.FaCopy} className=\"h-5 w-5 text-gray-600\" />\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-6\">\n                    <button\n                      type=\"button\"\n                      onClick={() => {\n                        // When returning to instructions, make sure we regenerate the email data\n                        // from the form data if it's been lost\n                        setShowEmailWarning(false);\n                        setIsEmailButtonLoading(false); // Reset button state\n                        \n                        // First try to get email data from localStorage\n                        try {\n                          const savedEmailData = localStorage.getItem('caaeEmailData');\n                          if (savedEmailData) {\n                            const parsedEmailData = JSON.parse(savedEmailData);\n                            if (parsedEmailData.subject && parsedEmailData.body) {\n                              // Restore from saved email data\n                              setEmailData({\n                                subject: parsedEmailData.subject,\n                                body: parsedEmailData.body,\n                                copySuccess: ''\n                              });\n                              console.log('Restored email data from localStorage when returning from warning');\n                              return;\n                            }\n                          }\n                        } catch (error) {\n                          console.error('Error retrieving email data from localStorage:', error);\n                        }\n                        \n                        // Double-check if email data is empty, regenerate it from form values if needed\n                        if (!emailData.subject || !emailData.body) {\n                          try {\n                            // Get values from form data\n                            const firstName = formData.firstName.value;\n                            const lastName = formData.lastName.value;\n                            const middleName = formData.middleName.value || 'N/A';\n                            const birthDate = formData.birthDate.value || 'N/A';\n                            const institution = formData.institution.value || 'N/A';\n                            const country = formData.country.value || 'N/A';\n                            const email = formData.email.value || '';\n                            const phone = formData.phone.value || 'N/A';\n                            \n                            // Regenerate email subject\n                            const emailSubject = `CAEA Conference Registration: ${formData.registrationType === REGISTER_SPEAKER ? 'Speaker' : 'Participant'} - ${firstName} ${lastName}`;\n                            \n                            // Regenerate email body\n                            let emailBody = `Registration Type: ${formData.registrationType === REGISTER_SPEAKER ? 'Speaker' : 'Participant'}\\n\\n`;\n                            emailBody += `Personal Information:\\n`;\n                            emailBody += `-------------------\\n`;\n                            emailBody += `First Name: ${firstName}\\n`;\n                            emailBody += `Last Name: ${lastName}\\n`;\n                            emailBody += `Middle Name: ${middleName}\\n`;\n                            emailBody += `Birth Date: ${birthDate}\\n`;\n                            emailBody += `Institution: ${institution}\\n`;\n                            emailBody += `Country: ${country}\\n`;\n                            emailBody += `Email: ${email}\\n`;\n                            emailBody += `Phone: ${phone}\\n`;\n                            \n                            // Add speaker-specific information if applicable\n                            if (formData.registrationType === REGISTER_SPEAKER) {\n                              emailBody += `\\nPaper Information:\\n`;\n                              emailBody += `----------------\\n`;\n                              emailBody += `Title: ${formData.paperTitle.value || ''}\\n`;\n                              emailBody += `Abstract: ${formData.paperAbstract.value || ''}\\n`;\n                              emailBody += `Co-Authors: ${formData.coAuthors.value || 'None'}\\n`;\n                              emailBody += `Keywords: ${formData.keywords.value || 'N/A'}\\n\\n`;\n                              emailBody += `Note: Please attach your full paper in PDF format to this email.\\n`;\n                            }\n                            \n                            emailBody += `\\nRegistration Date: ${new Date().toLocaleString()}\\n`;\n                            \n                            // Restore email data\n                            setEmailData({\n                              subject: emailSubject,\n                              body: emailBody,\n                              copySuccess: ''\n                            });\n                            \n                            // Save the regenerated email data to localStorage\n                            localStorage.setItem('caaeEmailData', JSON.stringify({\n                              subject: emailSubject,\n                              body: emailBody\n                            }));\n                            \n                            console.log('Email data regenerated after returning from warning screen');\n                          } catch (error) {\n                            console.error('Error regenerating email data:', error);\n                          }\n                        }\n                      }}\n                      className=\"inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-primary hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary\"\n                    >\n                      Return to Instructions\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <>\n                  <div className=\"mx-auto h-20 w-20 text-primary bg-primary bg-opacity-10 rounded-full flex items-center justify-center\">\n                    <Icon icon={FaIcons.FaPaperPlane} className=\"h-10 w-10 text-primary\" />\n                  </div>\n                  \n                  <h3 className=\"mt-4 text-2xl font-medium text-gray-900\">Email Registration Instructions</h3>\n                  <p className=\"mt-3 text-lg text-gray-600\">\n                    You can complete your registration by sending an email to us in two ways:\n                  </p>\n                  \n                  <div className=\"mt-8 grid grid-cols-1 md:grid-cols-1 gap-8\">\n                    {/* Option 1: Manual Email - Most reliable method */}\n                    <div className=\"bg-white p-6 rounded-lg border-2 border-green-500 shadow-md\">\n                      <div className=\"mx-auto w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n                        <Icon icon={FaIcons.FaCopy} className=\"h-6 w-6 text-green-600\" />\n                      </div>\n                      <h4 className=\"text-lg font-medium text-gray-900 mb-2\">Option 1: Manual Email (Recommended)</h4>\n                      <p className=\"text-gray-600 mb-6\">Copy the details below and send from your preferred email service.</p>\n                      \n                      <div className=\"text-left space-y-5\">\n                        <div>\n                          <div className=\"flex justify-between items-center mb-2\">\n                            <p className=\"text-sm font-medium text-gray-700\">Send To:</p>\n                            {emailData.copySuccess === 'Email Copied!' && (\n                              <span className=\"text-xs bg-green-100 text-green-600 font-medium px-2 py-1 rounded-full\">✓ Copied!</span>\n                            )}\n                          </div>\n                          <div className=\"flex\">\n                            <input \n                              type=\"text\" \n                              readOnly \n                              value={REGISTRATION_EMAIL}\n                              className=\"border border-gray-300 flex-grow rounded-l-md text-sm py-3 px-3 bg-gray-50\"\n                            />\n                            <button\n                              onClick={() => copyToClipboard(REGISTRATION_EMAIL, 'Email')}\n                              className=\"bg-gray-200 hover:bg-gray-300 py-3 px-4 rounded-r-md transition-colors\"\n                              aria-label=\"Copy email address\"\n                              title=\"Copy to clipboard\"\n                            >\n                              <Icon icon={FaIcons.FaCopy} className=\"h-5 w-5 text-gray-600\" />\n                            </button>\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <div className=\"flex justify-between items-center mb-2\">\n                            <p className=\"text-sm font-medium text-gray-700\">Subject:</p>\n                            {emailData.copySuccess === 'Subject Copied!' && (\n                              <span className=\"text-xs bg-green-100 text-green-600 font-medium px-2 py-1 rounded-full\">✓ Copied!</span>\n                            )}\n                          </div>\n                          <div className=\"flex\">\n                            <input \n                              type=\"text\" \n                              readOnly \n                              value={emailData.subject}\n                              className=\"border border-gray-300 flex-grow rounded-l-md text-sm py-3 px-3 bg-gray-50\"\n                            />\n                            <button\n                              onClick={() => copyToClipboard(emailData.subject, 'Subject')}\n                              className=\"bg-gray-200 hover:bg-gray-300 py-3 px-4 rounded-r-md transition-colors\"\n                              aria-label=\"Copy subject\"\n                              title=\"Copy to clipboard\"\n                            >\n                              <Icon icon={FaIcons.FaCopy} className=\"h-5 w-5 text-gray-600\" />\n                            </button>\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <div className=\"flex justify-between items-center mb-2\">\n                            <p className=\"text-sm font-medium text-gray-700\">Email Body:</p>\n                            {emailData.copySuccess === 'Body Copied!' && (\n                              <span className=\"text-xs bg-green-100 text-green-600 font-medium px-2 py-1 rounded-full\">✓ Copied!</span>\n                            )}\n                          </div>\n                          <div className=\"relative\">\n                            <textarea\n                              readOnly\n                              rows={10}\n                              value={emailData.body}\n                              className=\"w-full border border-gray-300 rounded-md text-sm py-3 px-3 bg-gray-50 min-h-[200px]\"\n                            />\n                            <button\n                              onClick={() => copyToClipboard(emailData.body, 'Body')}\n                              className=\"absolute top-2 right-2 bg-gray-200 hover:bg-gray-300 p-3 rounded-md transition-colors shadow-sm\"\n                              aria-label=\"Copy email body\"\n                              title=\"Copy to clipboard\"\n                            >\n                              <Icon icon={FaIcons.FaCopy} className=\"h-5 w-5 text-gray-600\" />\n                            </button>\n                          </div>\n                        </div>\n                        \n                        {formData.registrationType === REGISTER_SPEAKER && (\n                          <div className=\"p-4 bg-yellow-50 rounded-md text-sm text-yellow-700 flex items-start\">\n                            <Icon icon={FaIcons.FaExclamationTriangle} className=\"h-5 w-5 text-yellow-500 mr-3 flex-shrink-0 mt-0.5\" />\n                            <div>\n                              <strong>Important:</strong> Don't forget to attach your paper in PDF format to your email.\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    \n                    {/* Option 2: Auto Email Client */}\n                    <div className=\"bg-white p-6 rounded-lg border border-gray-200 shadow-sm mt-3\">\n                      <div className=\"mx-auto w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-4\">\n                        <Icon icon={FaIcons.FaEnvelope} className=\"h-6 w-6 text-blue-600\" />\n                      </div>\n                      <h4 className=\"text-lg font-medium text-gray-900 mb-2\">Option 2: Automatic Email</h4>\n                      <p className=\"text-gray-600 mb-6\">Try opening your default email client with pre-filled message. <span className=\"text-red-600 font-medium\">(May not work on all systems)</span></p>\n                      \n                      <div className=\"mt-2 text-left bg-gray-50 p-4 rounded-lg shadow-inner mb-6\">\n                        <p className=\"font-medium text-gray-800 mb-2\">Steps:</p>\n                        <ol className=\"ml-4 text-gray-700 list-decimal space-y-2 text-sm\">\n                          <li>Click the button below</li>\n                          <li>Your email client will open with pre-filled details</li>\n                          {formData.registrationType === REGISTER_SPEAKER && (\n                            <li className=\"font-medium text-primary\">Attach your full paper in PDF format</li>\n                          )}\n                          <li>Click send to complete registration</li>\n                        </ol>\n                      </div>\n                      \n                      <button\n                        type=\"button\"\n                        onClick={proceedWithEmail}\n                        disabled={isEmailButtonLoading}\n                        className={`w-full inline-flex justify-center items-center px-5 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white ${isEmailButtonLoading ? 'bg-blue-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200`}\n                      >\n                        {isEmailButtonLoading ? (\n                          <>\n                            <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                            </svg>\n                            Opening Email...\n                          </>\n                        ) : (\n                          <>\n                            Try Automatic Email\n                            <svg className=\"ml-2 h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M14 5l7 7m0 0l-7 7m7-7H3\"></path>\n                            </svg>\n                          </>\n                        )}\n                      </button>\n                      \n                      <p className=\"mt-3 text-xs text-gray-500 text-center\">If this doesn't work, please reload the page and use Option 1 above.</p>\n                    </div>\n                  </div>\n                  \n                  {/* Add a confirmation button to mark registration as complete */}\n                  <div className=\"mt-8 border-t border-gray-200 pt-6\">\n                    <p className=\"text-gray-600 mb-4\">After sending your email, please click the button below to complete the process:</p>\n                    <button\n                      type=\"button\"\n                      onClick={completeRegistration}\n                      className=\"inline-flex justify-center items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors duration-200\"\n                    >\n                      <Icon icon={FaIcons.FaCheckCircle} className=\"mr-2 h-5 w-5\" />\n                      I've Sent My Email\n                    </button>\n                  </div>\n                  \n                  <div className=\"mt-8 flex justify-center\">\n                    <button\n                      type=\"button\"\n                      onClick={() => resetRegistrationFlow()}\n                      className=\"inline-flex items-center px-6 py-3 border border-gray-300 shadow-sm text-base font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors duration-200\"\n                    >\n                      <svg className=\"mr-2 h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 19l-7-7m0 0l7-7m-7 7h18\"></path>\n                      </svg>\n                      Back to Form\n                    </button>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto py-8 px-4 sm:py-12 sm:px-6 lg:px-8\">\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-extrabold text-gray-900 sm:text-4xl\">\n          Conference Registration\n        </h1>\n        <p className=\"mt-4 text-xl text-gray-500 max-w-3xl mx-auto\">\n          Register for the Central Asian Economics Association Conference 2023\n        </p>\n      </div>\n      \n      <StepIndicator />\n\n      <div className=\"bg-white shadow-lg rounded-lg overflow-hidden\">\n        <div className=\"bg-gradient-to-r from-primary to-secondary py-6 px-6\">\n          <h2 className=\"text-2xl font-bold text-white\">Registration Form</h2>\n          <p className=\"text-white text-opacity-80 mt-1\">Please complete all required fields marked with *</p>\n        </div>\n        \n        <div className=\"px-4 py-6 sm:p-8\">\n          <form \n            onSubmit={(e) => {\n              e.preventDefault(); // Always prevent default submission\n              handlePreview(e);\n            }}\n            onClick={(e) => {\n              // Prevent any clicks from bubbling up to parent elements\n              e.stopPropagation();\n            }}\n            onKeyDown={(e) => {\n              // Prevent form submission on Enter key\n              if (e.key === 'Enter') {\n                e.preventDefault();\n              }\n            }}\n          >\n            {/* Registration Type */}\n            <div className=\"mb-8\">\n              <h3 className=\"text-lg font-bold text-gray-900 mb-4\">Registration Type <span className=\"text-red-500\">*</span></h3>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <label \n                  className={`flex cursor-pointer ${formData.registrationType === REGISTER_PARTICIPANT \n                    ? 'bg-primary-50 border-primary' \n                    : 'bg-white border-gray-200'} \n                    border-2 rounded-lg p-4 hover:bg-gray-50 transition-colors duration-200`}\n                >\n                  <input\n                    type=\"radio\"\n                    name=\"registrationType\"\n                    value={REGISTER_PARTICIPANT}\n                    checked={formData.registrationType === REGISTER_PARTICIPANT}\n                    onChange={handleRegistrationTypeChange}\n                    className=\"sr-only\"\n                  />\n                  <div className=\"flex items-center\">\n                    <div className={`flex items-center justify-center w-12 h-12 rounded-full ${formData.registrationType === REGISTER_PARTICIPANT ? 'bg-primary text-white' : 'bg-gray-100 text-gray-500'}`}>\n                      <Icon icon={FaIcons.FaUser} className=\"h-6 w-6\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <h4 className={`text-base font-medium ${formData.registrationType === REGISTER_PARTICIPANT ? 'text-primary' : 'text-gray-900'}`}>Participant</h4>\n                      <p className=\"text-sm text-gray-500\">Attend the conference only</p>\n                    </div>\n                  </div>\n                </label>\n                <label \n                  className={`flex cursor-pointer ${formData.registrationType === REGISTER_SPEAKER \n                    ? 'bg-primary-50 border-primary' \n                    : 'bg-white border-gray-200'} \n                    border-2 rounded-lg p-4 hover:bg-gray-50 transition-colors duration-200`}\n                >\n                  <input\n                    type=\"radio\"\n                    name=\"registrationType\"\n                    value={REGISTER_SPEAKER}\n                    checked={formData.registrationType === REGISTER_SPEAKER}\n                    onChange={handleRegistrationTypeChange}\n                    className=\"sr-only\"\n                  />\n                  <div className=\"flex items-center\">\n                    <div className={`flex items-center justify-center w-12 h-12 rounded-full ${formData.registrationType === REGISTER_SPEAKER ? 'bg-primary text-white' : 'bg-gray-100 text-gray-500'}`}>\n                      <Icon icon={FaIcons.FaMicrophone} className=\"h-6 w-6\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <h4 className={`text-base font-medium ${formData.registrationType === REGISTER_SPEAKER ? 'text-primary' : 'text-gray-900'}`}>Speaker</h4>\n                      <p className=\"text-sm text-gray-500\">Present research paper</p>\n                    </div>\n                  </div>\n                </label>\n              </div>\n            </div>\n\n            <div className=\"mt-10\">\n              <h3 className=\"text-lg font-bold text-gray-900 mb-6 pb-2 border-b border-gray-200\">Personal Information</h3>\n              <div className=\"grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6\">\n                <div className=\"sm:col-span-2\">\n                  <FormField \n                    label=\"First Name\" \n                    name=\"firstName\" \n                    required={true} \n                    placeholder=\"Enter your first name\"\n                  />\n                </div>\n\n                <div className=\"sm:col-span-2\">\n                  <FormField \n                    label=\"Last Name\" \n                    name=\"lastName\" \n                    required={true} \n                    placeholder=\"Enter your last name\"\n                  />\n                </div>\n\n                <div className=\"sm:col-span-2\">\n                  <FormField \n                    label=\"Middle Name\" \n                    name=\"middleName\" \n                    placeholder=\"Optional\"\n                  />\n                </div>\n\n                <div className=\"sm:col-span-3\">\n                  <FormField \n                    label=\"Birth Date\" \n                    name=\"birthDate\" \n                    type=\"date\"\n                  />\n                </div>\n\n                <div className=\"sm:col-span-3\">\n                  <FormField \n                    label=\"Email Address\" \n                    name=\"email\" \n                    type=\"email\"\n                    required={true} \n                    placeholder=\"your.email@example.com\"\n                    tooltip=\"We'll use this email to send you conference information\"\n                  />\n                </div>\n\n                <div className=\"sm:col-span-3\">\n                  <FormField \n                    label=\"Phone Number\" \n                    name=\"phone\" \n                    type=\"tel\"\n                    placeholder=\"International format (e.g. +1 123 456 7890)\"\n                  />\n                </div>\n\n                <div className=\"sm:col-span-3\">\n                  <FormField \n                    label=\"Institution/Organization\" \n                    name=\"institution\" \n                    placeholder=\"University or company name\"\n                  />\n                </div>\n\n                <div className=\"sm:col-span-3\">\n                  <FormField \n                    label=\"Country\" \n                    name=\"country\" \n                    placeholder=\"Your country of residence\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Speaker-specific fields */}\n            {formData.registrationType === REGISTER_SPEAKER && (\n              <div className=\"mt-10\">\n                <h3 className=\"text-lg font-bold text-gray-900 mb-6 pb-2 border-b border-gray-200 flex items-center\">\n                  <Icon icon={FaIcons.FaFileAlt} className=\"mr-2 text-primary\" />\n                  Paper Information\n                </h3>\n                <div className=\"grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6\">\n                  <div className=\"sm:col-span-6\">\n                    <FormField \n                      label=\"Paper Title\" \n                      name=\"paperTitle\" \n                      required={true} \n                      placeholder=\"Enter the title of your research paper\"\n                    />\n                  </div>\n\n                  <div className=\"sm:col-span-6\">\n                    <FormField \n                      label=\"Abstract\" \n                      name=\"paperAbstract\" \n                      type=\"textarea\"\n                      rows={4}\n                      required={true} \n                      placeholder=\"Provide a brief summary of your paper (250-300 words)\"\n                      tooltip=\"A good abstract should include your research question, methodology, key findings, and significance\"\n                    />\n                    <p className=\"mt-2 text-sm text-gray-500\">Brief summary of your paper (250-300 words)</p>\n                  </div>\n\n                  <div className=\"sm:col-span-6\">\n                    <FormField \n                      label=\"Co-Authors\" \n                      name=\"coAuthors\" \n                      placeholder=\"Separate names with commas\"\n                      tooltip=\"List all co-authors in the format: First Name Last Name, First Name Last Name\"\n                    />\n                    <p className=\"mt-2 text-sm text-gray-500\">Separate names with commas</p>\n                  </div>\n\n                  <div className=\"sm:col-span-6\">\n                    <FormField \n                      label=\"Keywords\" \n                      name=\"keywords\" \n                      placeholder=\"e.g., Economics, Finance, Central Asia\"\n                    />\n                    <p className=\"mt-2 text-sm text-gray-500\">Separate keywords with commas</p>\n                  </div>\n                  \n                  <div className=\"sm:col-span-6\">\n                    <div className=\"rounded-md bg-yellow-50 p-4 shadow-sm\">\n                      <div className=\"flex\">\n                        <div className=\"flex-shrink-0\">\n                          <svg className=\"h-5 w-5 text-yellow-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                            <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                          </svg>\n                        </div>\n                        <div className=\"ml-3\">\n                          <h3 className=\"text-sm font-medium text-yellow-800\">Important Note</h3>\n                          <div className=\"mt-2 text-sm text-yellow-700\">\n                            <p>You will need to attach your full paper (PDF format) to the email that will be generated after submitting this form.</p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Error message */}\n            {formData.error && (\n              <div className=\"mt-6 text-red-600 text-sm p-3 bg-red-50 rounded-md\">\n                <div className=\"flex\">\n                  <svg className=\"h-5 w-5 text-red-500 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                  </svg>\n                  {formData.error}\n                </div>\n              </div>\n            )}\n\n            {/* Submit button */}\n            <div className=\"mt-8 flex justify-end\">\n              <button\n                type=\"submit\"\n                disabled={formData.loading}\n                className={`inline-flex justify-center items-center py-3 px-6 border border-transparent text-base font-medium rounded-md shadow-md text-white bg-primary hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors duration-200 ${formData.loading ? 'opacity-70 cursor-not-allowed' : ''}`}\n              >\n                {formData.loading ? (\n                  <span className=\"flex items-center\">\n                    <svg className=\"animate-spin -ml-1 mr-2 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                    Processing...\n                  </span>\n                ) : (\n                  <span className=\"flex items-center\">\n                    Continue to Email\n                    <Icon icon={FaIcons.FaArrowRight} className=\"ml-2\" />\n                  </span>\n                )}\n              </button>\n            </div>\n            \n            {/* Auto-save indicator */}\n            <div className=\"mt-4 flex justify-center text-sm text-gray-500\">\n              <div className=\"flex items-center\">\n                {isSaving ? (\n                  <>\n                    <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-primary\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                    <span>Saving your changes...</span>\n                  </>\n                ) : (\n                  <>\n                    <Icon icon={FaIcons.FaCheck} className=\"h-4 w-4 text-green-500 mr-2\" />\n                    <span>Your data is saved automatically</span>\n                  </>\n                )}\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Register; "],"names":["REGISTER_PARTICIPANT","REGISTER_SPEAKER","REGISTRATION_EMAIL","Icon","_ref","icon","className","React","Register","inputRefs","emailData","setEmailData","useState","subject","body","copySuccess","formData","setFormData","registrationType","firstName","value","valid","touched","errorMessage","lastName","middleName","birthDate","institution","country","email","phone","paperTitle","paperAbstract","coAuthors","keywords","error","loading","activeTooltip","setActiveTooltip","isSaving","setIsSaving","useEffect","localStorage","getItem","savedData","parsedData","JSON","parse","validFields","Object","keys","filter","key","restoredData","_objectSpread","isFieldState","obj","forEach","savedField","fieldData","validateField","setTimeout","current","input","savedEmailData","parsedEmailData","console","log","setShowInstructions","setShowEmailWarning","e","regenerateEmailDataFromForm","emailSubject","concat","emailBody","Date","toLocaleString","displayEmailBody","replace","setItem","stringify","length","removeItem","dataToSave","entries","_ref2","field","_inputRefs$current$ke","currentValue","timer","clearTimeout","validateDate","dateString","inputDate","isNaN","getTime","today","setHours","minDate","setFullYear","getFullYear","fieldName","trim","test","toLowerCase","_inputRefs$current$pa","_inputRefs$current$pa2","paperTitleValue","paperAbstractValue","prev","handleRegistrationTypeChange","target","handleBlur","name","handleDateChange","FormField","_ref3","label","type","required","placeholder","tooltip","rows","showError","setInputRef","el","handleKeyDown","preventDefault","toISOString","split","minDateString","dateProps","max","min","onChange","_jsxs","children","htmlFor","_jsx","onClick","stopPropagation","onMouseDown","FaIcons","id","ref","defaultValue","onKeyDown","onBlur","showInstructions","showEmailWarning","isEmailButtonLoading","setIsEmailButtonLoading","_parsedFormData$first","_parsedFormData$lastN","_parsedFormData$middl","_parsedFormData$birth","_parsedFormData$insti","_parsedFormData$count","_parsedFormData$email","_parsedFormData$phone","savedFormData","parsedFormData","_parsedFormData$paper","_parsedFormData$paper2","_parsedFormData$coAut","_parsedFormData$keywo","proceedWithEmail","updatedFields","fromEntries","_ref4","map","_ref5","_inputRefs$current$ke2","fieldState","isFormDataSaved","saveFormBeforeCriticalAction","alert","encodedSubject","encodeURIComponent","encodedBody","mailtoURL","emailClientOpened","mailtoLink","document","createElement","href","style","display","appendChild","click","clickError","removeChild","hasFocus","newWindow","window","open","closed","location","copyToClipboard","content","fallbackCopyToClipboard","textarea","position","left","top","focus","select","execCommand","successMessage","err","navigator","clipboard","isSecureContext","writeText","then","catch","StepIndicator","registrationComplete","setRegistrationComplete","_ref6","_inputRefs$current$ke3","completeRegistration","handlePreview","_ref7","_ref8","_inputRefs$current$ke4","isFormValid","requiredFields","push","every","_inputRefs$current$fi","_inputRefs$current$fi2","_inputRefs$current$la","_inputRefs$current$fi3","_inputRefs$current$la2","_inputRefs$current$mi","_inputRefs$current$bi","_inputRefs$current$in","_inputRefs$current$co","_inputRefs$current$em","_inputRefs$current$ph","_inputRefs$current$pa3","_inputRefs$current$pa4","_inputRefs$current$co2","_inputRefs$current$ke5","firstErrorField","querySelector","scrollIntoView","behavior","block","readOnly","title","_Fragment","disabled","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","strokeLinecap","strokeLinejoin","resetRegistrationFlow","undefined","onSubmit","checked","fillRule","clipRule"],"sourceRoot":""}