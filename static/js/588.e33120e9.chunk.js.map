{"version":3,"file":"static/js/588.e33120e9.chunk.js","mappings":"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","sources":["services/sessionizeService.ts","pages/Schedule.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nexport interface Session {\n  id: string;\n  title: string;\n  description: string;\n  startsAt: string;\n  endsAt: string;\n  isServiceSession: boolean;\n  isPlenumSession: boolean;\n  speakers: string[];\n  roomId: number;\n  status: string;\n  liveUrl: string | null;\n  recordingUrl: string | null;\n}\n\nexport interface Speaker {\n  id: string;\n  firstName: string;\n  lastName: string;\n  fullName: string;\n  bio: string;\n  tagLine: string;\n  profilePicture: string;\n  isTopSpeaker: boolean;\n  sessions: number[];\n}\n\nexport interface Room {\n  id: number;\n  name: string;\n  sort: number;\n}\n\nexport interface SessionizeData {\n  sessions: Session[];\n  speakers: Speaker[];\n  rooms: Room[];\n  categories: any[];\n  questions: any[];\n}\n\nconst API_URL = 'https://sessionize.com/api/v2/i66sipcq/view/All';\n\nexport const useSessionizeData = () => {\n  const [data, setData] = useState<SessionizeData | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(API_URL);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const jsonData = await response.json();\n        setData(jsonData);\n      } catch (err) {\n        setError(err instanceof Error ? err : new Error('An unknown error occurred'));\n        console.error('Error fetching Sessionize data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return { data, loading, error };\n};\n\n// Helper function to get speaker details for a session\nexport const findSpeakersForSession = (session: Session, allSpeakers: Speaker[]) => {\n  return allSpeakers.filter(speaker => session.speakers.includes(speaker.id));\n};\n\n// Helper function to get room details for a session\nexport const findRoomForSession = (session: Session, allRooms: Room[]) => {\n  return allRooms.find(room => room.id === session.roomId);\n};\n\n// Helper function to group sessions by date\nexport const groupSessionsByDate = (sessions: Session[]) => {\n  const grouped = sessions.reduce((acc, session) => {\n    const date = new Date(session.startsAt).toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n    \n    if (!acc[date]) {\n      acc[date] = [];\n    }\n    \n    acc[date].push(session);\n    return acc;\n  }, {} as Record<string, Session[]>);\n  \n  // Sort sessions by start time within each day\n  Object.keys(grouped).forEach(date => {\n    grouped[date].sort((a, b) => \n      new Date(a.startsAt).getTime() - new Date(b.startsAt).getTime()\n    );\n  });\n  \n  return grouped;\n};\n\n// Format date and time from ISO string\nexport const formatSessionTime = (isoString: string) => {\n  return new Date(isoString).toLocaleTimeString('en-US', {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n}; ","import React, { useState } from 'react';\nimport { useSessionizeData, groupSessionsByDate, formatSessionTime, findRoomForSession, findSpeakersForSession } from '../services/sessionizeService';\n\nconst Schedule: React.FC = () => {\n  const { data, loading, error } = useSessionizeData();\n  const [activeDay, setActiveDay] = useState<string | null>(null);\n\n  // Handle loading and error states\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center py-16\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 p-4 rounded-md\">\n        <h3 className=\"text-lg font-medium text-red-800\">Error loading schedule</h3>\n        <p className=\"mt-2 text-sm text-red-700\">\n          Unable to load the conference schedule. Please try again later.\n        </p>\n      </div>\n    );\n  }\n\n  if (!data || !data.sessions || data.sessions.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <h2 className=\"text-xl font-semibold text-gray-900\">No schedule available</h2>\n        <p className=\"mt-2 text-gray-600\">The conference schedule has not been published yet. Please check back later.</p>\n      </div>\n    );\n  }\n\n  // Group sessions by date\n  const groupedSessions = groupSessionsByDate(data.sessions);\n  const days = Object.keys(groupedSessions);\n  \n  // Initialize active day if not set\n  if (!activeDay && days.length > 0) {\n    setActiveDay(days[0]);\n  }\n\n  const currentDaySessions = activeDay && groupedSessions[activeDay] ? groupedSessions[activeDay] : [];\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"text-center\">\n        <h1 className=\"text-3xl font-extrabold text-gray-900 sm:text-4xl\">\n          Conference Schedule\n        </h1>\n        <p className=\"mt-4 text-xl text-gray-500 max-w-3xl mx-auto\">\n          Detailed schedule of sessions and events\n        </p>\n      </div>\n\n      {/* Day selector tabs */}\n      <div className=\"border-b border-gray-200\">\n        <nav className=\"-mb-px flex space-x-8 justify-center overflow-x-auto\" aria-label=\"Tabs\">\n          {days.map((day) => (\n            <button\n              key={day}\n              onClick={() => setActiveDay(day)}\n              className={`\n                whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm\n                ${activeDay === day\n                  ? 'border-primary text-primary'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}\n              `}\n            >\n              {day}\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Schedule for selected day */}\n      {activeDay && (\n        <div className=\"bg-white shadow overflow-hidden sm:rounded-md\">\n          <div className=\"bg-primary px-4 py-5 sm:px-6\">\n            <h2 className=\"text-xl leading-6 font-medium text-white\">\n              {activeDay}\n            </h2>\n          </div>\n          <ul className=\"divide-y divide-gray-200\">\n            {currentDaySessions.map((session) => {\n              const room = data.rooms ? findRoomForSession(session, data.rooms) : null;\n              const speakers = data.speakers ? findSpeakersForSession(session, data.speakers) : [];\n              \n              const startTime = formatSessionTime(session.startsAt);\n              const endTime = formatSessionTime(session.endsAt);\n              \n              return (\n                <li key={session.id}>\n                  <div className=\"px-4 py-4 sm:px-6 hover:bg-gray-50\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex min-w-0 flex-1 items-center\">\n                        <div className=\"min-w-0 flex-1 px-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <p className=\"text-sm font-medium text-primary truncate\">\n                              {startTime} - {endTime}\n                            </p>\n                            <p className=\"text-sm text-gray-500\">\n                              {room ? room.name : 'Room TBA'}\n                            </p>\n                          </div>\n                          <p className=\"mt-2 text-md font-medium text-gray-900\">{session.title}</p>\n                          {speakers.length > 0 && (\n                            <p className=\"mt-1 text-sm text-gray-500\">\n                              Speakers: {speakers.map(speaker => speaker.fullName).join(', ')}\n                            </p>\n                          )}\n                          {session.description && (\n                            <p className=\"mt-1 text-sm text-gray-500\">{session.description}</p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n\n      <div className=\"bg-gray-50 rounded-lg p-6\">\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Schedule Updates</h3>\n        <p className=\"text-gray-600 mb-4\">\n          The conference schedule is subject to change. Please check back regularly for updates.\n        </p>\n        <button\n          className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary\"\n        >\n          Download Schedule\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Schedule; "],"names":["useSessionizeData","data","setData","useState","loading","setLoading","error","setError","useEffect","async","response","fetch","ok","Error","concat","status","jsonData","json","err","console","fetchData","findSpeakersForSession","session","allSpeakers","filter","speaker","speakers","includes","id","findRoomForSession","allRooms","find","room","roomId","groupSessionsByDate","sessions","grouped","reduce","acc","date","Date","startsAt","toLocaleDateString","weekday","year","month","day","push","Object","keys","forEach","sort","a","b","getTime","formatSessionTime","isoString","toLocaleTimeString","hour","minute","Schedule","activeDay","setActiveDay","_jsx","className","children","_jsxs","length","groupedSessions","days","currentDaySessions","map","onClick","rooms","startTime","endTime","endsAt","name","title","fullName","join","description"],"sourceRoot":""}